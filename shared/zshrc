fpath=(~/.zsh_functions $fpath)

HISTFILE=~/.histfile
HISTSIZE=50000
SAVEHIST=50000
bindkey -v
zstyle :compinstall filename '/home/geoffliu/.zshrc'

bindkey -v '\\q' push-line-or-edit
bindkey -v '.,' vi-cmd-mode

foreground-command() { fg }
zle -N foreground-command
bindkey '^Z' foreground-command

function add_to_frequent_dirs {
  if [[ "$#" == "1" ]]; then
    local TmpFile="$(mktemp)"
    echo "$(realpath "$1")" > "$TmpFile"
    cat "$PERSONAL_CONFIG_DIR/extras/frequent_dirs" >> "$TmpFile"
    head -n 10000 "$TmpFile" > "$PERSONAL_CONFIG_DIR/extras/frequent_dirs"
  fi
  cd "$@"
}
function frequent_dirs {
  local Directory="$(<$PERSONAL_CONFIG_DIR/extras/frequent_dirs | sort | uniq -c | sort -nr | tr -s ' ' | cut -f3 -d' ' | fzf --height=40%)"
  if [[ "a$Directory" != "a" ]]; then
    add_to_frequent_dirs "$Directory"
  fi
  zle reset-prompt
}
alias frcd="add_to_frequent_dirs"
zle -N frequent_dirs
bindkey '\\r' frequent_dirs

autoload -Uz compinit
compinit

autoload -U url-quote-magic
zle -N self-insert url-quote-magic

setopt EXTENDED_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt SHARE_HISTORY
setopt HISTIGNORESPACE

setopt NO_NOMATCH
setopt NO_BAD_PATTERN
setopt EXTENDEDGLOB

setopt IGNORE_EOF
setopt MULTIBYTE

REPORTTIME=10

autoload -Uz vcs_info

function precmd {
  vcs_info 'prompt'
}

setopt PROMPT_SUBST
function git_status_char {
  [[ -n "$(git status -s 2>/dev/null)" ]] && echo "ðŸ‘€ "
}
function vim_status_word {
  echo ${${KEYMAP/vicmd/[ NORMAL ]}/(main|viins)/[ INSERT ]}
}
function shared_rprompt {
  echo "$(vim_status_word) %D %T"
}

function zle-line-init zle-keymap-select {
  zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

function get_super_prompt_line {
  local Right="$(rtprompt) "
  echo -n "%F{5}${(l:$COLUMNS:m)Right}%f"
}

zstyle ':vcs_info:*:prompt:*' formats "%u%b "
zstyle ':vcs_info:*:prompt:*' actionformats "%b %a "
PROMPT=$'\n$(get_super_prompt_line)\n%F{5}[%m $(git_status_char)${vcs_info_msg_0_}%1~]%# %f'
RPROMPT='%0(?.%F{5}$(shared_rprompt) [ OK ]%f.%F{5}%S$(shared_rprompt) [ %? ]%s%f)'

export EDITOR=vim
export VISUAL=vim
export LESS=FRX
export PAGER=less
export WWW_HOME="www.google.com"
export BROWSER="google-chrome-stable"
export PATH="$PATH:$HOME/bin:$HOME/.local/bin"

export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

vimquickfix() {
  errorfile=$(mktemp)
  $=1 > $errorfile
  if [[ -s $errorfile ]]; then
    vim -q $errorfile
  else
    echo $2
  fi
}

gca() {
  if [ $# -eq 0 ]; then
    git commit -a -m "$($PERSONAL_CONFIG_DIR/spaceteam-gen/main.py)"
  else
    git commit -a -m "$*"
  fi
}

gl() {
  git log --format=oneline $* | head
}

bd() {
  # Trivial case
  if git diff --exit-code --quiet $1; then
    git branch -D $1
    return
  fi

  BaseBranch=$(git branch --show-current)
  MergeBase=$(git merge-base $1 HEAD)
  AllCommits=($(git rev-list --ancestry-path $MergeBase..HEAD))
  git checkout $1
  echo "Testing for a matching commint on $BaseBranch"
  for ((i = ${#AllCommits[@]}; i > 0; i--)); do
    TestCommit=${AllCommits[i]}
    if ! git merge --no-edit $TestCommit 2>&1 > /dev/null; then
      git reset --hard
      echo "Could not merge $TestCommit into $1, giving up"
      return -1
    fi
    if git diff --exit-code --quiet $TestCommit; then
      echo "Found $TestCommit to match $1."
      git checkout $BaseBranch
      git branch -D $1
      return
    fi
  done

  echo "Could not find a commit matching $1."
  return -1
}

alias gm='git checkout $(find-main-branch)'
alias gc="git checkout"
alias gs="git status -s"
alias gd="git diff"
alias gpp="git pull && git push"
alias b="git branch"
alias gpc='git push origin $(git branch --show-current)'
alias gmc='git branch --set-upstream-to=origin/$(git branch --show-current) $(git branch --show-current)'

alias -g MM='$(find-main-branch)'
alias -g MMM='$(git merge-base $(find-main-branch) HEAD)'
alias -g BB='$(find-branch-base)'
alias -g HH='HEAD~1'
alias -g CEV='commit -a --amend --no-edit'

alias g="./gradlew"
alias ll="ls -lh"
alias v="fg %vim || vim"
alias icat="kitty +kitten icat"

# WORKMAN BINDINGS
bindkey -M vicmd 'n' down-line-or-history
bindkey -M vicmd 'e' up-line-or-history
bindkey -M vicmd 'y' vi-backward-char
bindkey -M vicmd 'o' vi-forward-char

bindkey -M vicmd 'k' vi-repeat-search
bindkey -M vicmd 'K' vi-rev-repeat-search

bindkey -M vicmd 'h' vi-forward-word-end
bindkey -M vicmd 'H' vi-forward-blank-word-end
